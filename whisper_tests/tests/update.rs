extern crate whisper;
extern crate whisper_tests;

use std::fs;
use whisper::*;
use whisper::point::Point;
use whisper::retention::*;
use whisper_tests::*;

#[test]
fn test_update_snapshot() {
    let temp_dir = get_temp_dir();
    let path = get_file_path(&temp_dir, "update_snapshot");

    {
        WhisperBuilder::default()
            .add_retention(Retention { seconds_per_point: 1, points: 10 })
            .build(path.clone())
            .unwrap();
    }

    assert_eq!(fs::read(&path).unwrap(),
        vec![
            0u8, 0u8, 0u8, 1u8, // aggregation method
            0u8, 0u8, 0u8, 10u8, // max retention
            63u8, 0u8, 0u8, 0u8, // x files factor
            0u8, 0u8, 0u8, 1u8, // archives

            // archive info
            0u8, 0u8, 0u8, 28u8, // offset
            0u8, 0u8, 0u8, 1u8, // seconds per point
            0u8, 0u8, 0u8, 10u8, // points

            // archive data
            // interval            value
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
        ]
    );

    {
        let mut file = WhisperFile::open(&path).unwrap();
        file.update_many(&[Point { interval: 0x5b171b00, value: 123.0 }], 0x5b171b04).unwrap();
    }

    assert_eq!(fs::read(&path).unwrap(),
        vec![
            0u8, 0u8, 0u8, 1u8, // aggregation method
            0u8, 0u8, 0u8, 10u8, // max retention
            63u8, 0u8, 0u8, 0u8, // x files factor
            0u8, 0u8, 0u8, 1u8, // archives

            // archive info
            0u8, 0u8, 0u8, 28u8, // offset
            0u8, 0u8, 0u8, 1u8, // seconds per point
            0u8, 0u8, 0u8, 10u8, // points

            // archive data
            // interval                 value
            0x5b, 0x17, 0x1b, 0x00,     0x40, 0x5E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]
    );

    {
        let mut file = WhisperFile::open(&path).unwrap();
        file.update_many(&[Point { interval: 0x5b171b01, value: 123.0 }], 0x5b171b04).unwrap();
    }

    assert_eq!(fs::read(&path).unwrap(),
        vec![
            0u8, 0u8, 0u8, 1u8, // aggregation method
            0u8, 0u8, 0u8, 10u8, // max retention
            63u8, 0u8, 0u8, 0u8, // x files factor
            0u8, 0u8, 0u8, 1u8, // archives

            // archive info
            0u8, 0u8, 0u8, 28u8, // offset
            0u8, 0u8, 0u8, 1u8, // seconds per point
            0u8, 0u8, 0u8, 10u8, // points

            // archive data
            // interval                 value
            0x5b, 0x17, 0x1b, 0x00,     0x40, 0x5E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x5b, 0x17, 0x1b, 0x01,     0x40, 0x5E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]
    );

    {
        let mut file = WhisperFile::open(&path).unwrap();
        file.update_many(&[Point { interval: 0x5b171b04, value: 123.0 }, Point { interval: 0x5b171b06, value: 123.0 }], 0x5b171b04).unwrap();
    }

    assert_eq!(fs::read(&path).unwrap(),
        vec![
            0u8, 0u8, 0u8, 1u8, // aggregation method
            0u8, 0u8, 0u8, 10u8, // max retention
            63u8, 0u8, 0u8, 0u8, // x files factor
            0u8, 0u8, 0u8, 1u8, // archives

            // archive info
            0u8, 0u8, 0u8, 28u8, // offset
            0u8, 0u8, 0u8, 1u8, // seconds per point
            0u8, 0u8, 0u8, 10u8, // points

            // archive data
            // interval                 value
            0x5b, 0x17, 0x1b, 0x00,     0x40, 0x5E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x5b, 0x17, 0x1b, 0x01,     0x40, 0x5E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x5b, 0x17, 0x1b, 0x04,     0x40, 0x5E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x5b, 0x17, 0x1b, 0x06,     0x40, 0x5E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]
    );
}

#[test]
fn test_update_and_aggregate_snapshot() {
    let temp_dir = get_temp_dir();
    let path = get_file_path(&temp_dir, "update_and_aggregate_snapshot");

    {
        WhisperBuilder::default()
            .add_retention(Retention { seconds_per_point: 1, points: 5 })
            .add_retention(Retention { seconds_per_point: 2, points: 10 })
            .build(path.clone())
            .unwrap();
    }

    assert_eq!(fs::read(&path).unwrap(),
        vec![
            0u8, 0u8, 0u8, 1u8, // aggregation method
            0u8, 0u8, 0u8, 20u8, // max retention
            63u8, 0u8, 0u8, 0u8, // x files factor
            0u8, 0u8, 0u8, 2u8, // archives

            // archive info
            0u8, 0u8, 0u8, 40u8, // offset
            0u8, 0u8, 0u8, 1u8, // seconds per point
            0u8, 0u8, 0u8, 5u8, // points

            // archive info
            0u8, 0u8, 0u8, 100u8, // offset
            0u8, 0u8, 0u8, 2u8, // seconds per point
            0u8, 0u8, 0u8, 10u8, // points

            // archive data
            // interval            value
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,

            // archive data
            // interval            value
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8,    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
        ]
    );

    {
        let mut file = WhisperFile::open(&path).unwrap();
        file.update_many(&[Point { interval: 0x5b171b00, value: 123.0 }], 0x5b171b04).unwrap();
    }

    assert_eq!(fs::read(&path).unwrap(),
        vec![
            0u8, 0u8, 0u8, 1u8, // aggregation method
            0u8, 0u8, 0u8, 20u8, // max retention
            63u8, 0u8, 0u8, 0u8, // x files factor
            0u8, 0u8, 0u8, 2u8, // archives

            // archive info
            0u8, 0u8, 0u8, 40u8, // offset
            0u8, 0u8, 0u8, 1u8, // seconds per point
            0u8, 0u8, 0u8, 5u8, // points

            // archive info
            0u8, 0u8, 0u8, 100u8, // offset
            0u8, 0u8, 0u8, 2u8, // seconds per point
            0u8, 0u8, 0u8, 10u8, // points

            // archive data
            // interval                 value
            0x5b, 0x17, 0x1b, 0x00,     0x40, 0x5E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

            // archive data
            // interval                 value
            0x5b, 0x17, 0x1b, 0x00,     0x40, 0x5E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]
    );

    {
        let mut file = WhisperFile::open(&path).unwrap();
        file.update_many(&[Point { interval: 0x5b171b01, value: 23.0 }], 0x5b171b04).unwrap();
    }

    assert_eq!(fs::read(&path).unwrap(),
        vec![
            0u8, 0u8, 0u8, 1u8, // aggregation method
            0u8, 0u8, 0u8, 20u8, // max retention
            63u8, 0u8, 0u8, 0u8, // x files factor
            0u8, 0u8, 0u8, 2u8, // archives

            // archive info
            0u8, 0u8, 0u8, 40u8, // offset
            0u8, 0u8, 0u8, 1u8, // seconds per point
            0u8, 0u8, 0u8, 5u8, // points

            // archive info
            0u8, 0u8, 0u8, 100u8, // offset
            0u8, 0u8, 0u8, 2u8, // seconds per point
            0u8, 0u8, 0u8, 10u8, // points

            // archive data
            // interval                 value
            0x5b, 0x17, 0x1b, 0x00,     0x40, 0x5E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, // 123
            0x5b, 0x17, 0x1b, 0x01,     0x40, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 23
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

            // archive data
            // interval                 value
            0x5b, 0x17, 0x1b, 0x00,     0x40, 0x52, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, // 73
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]
    );

    {
        let mut file = WhisperFile::open(&path).unwrap();
        file.update_many(&[Point { interval: 0x5b171b04, value: 123.0 }, Point { interval: 0x5b171b06, value: 1000.0 }], 0x5b171b04).unwrap();
    }

    assert_eq!(fs::read(&path).unwrap(),
        vec![
            0u8, 0u8, 0u8, 1u8, // aggregation method
            0u8, 0u8, 0u8, 20u8, // max retention
            63u8, 0u8, 0u8, 0u8, // x files factor
            0u8, 0u8, 0u8, 2u8, // archives

            // archive info
            0u8, 0u8, 0u8, 40u8, // offset
            0u8, 0u8, 0u8, 1u8, // seconds per point
            0u8, 0u8, 0u8, 5u8, // points

            // archive info
            0u8, 0u8, 0u8, 100u8, // offset
            0u8, 0u8, 0u8, 2u8, // seconds per point
            0u8, 0u8, 0u8, 10u8, // points

            // archive data
            // interval                 value
            0x5b, 0x17, 0x1b, 0x00,     0x40, 0x5E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, // 123
            0x5b, 0x17, 0x1b, 0x06,     0x40, 0x8F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, // 1000
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x5b, 0x17, 0x1b, 0x04,     0x40, 0x5E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, // 123

            // archive data
            // interval                 value
            0x5b, 0x17, 0x1b, 0x00,     0x40, 0x52, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, // 73
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x5b, 0x17, 0x1b, 0x04,     0x40, 0x5E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, // 123
            0x5b, 0x17, 0x1b, 0x06,     0x40, 0x8F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, // 1000
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]
    );
}
